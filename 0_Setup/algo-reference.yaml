AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys the algorithmic trading reference architecture

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: algo

  AlphaVantageApiKey:
    Description: Your Alpha Vantage API key for historical data and news sentiment.
    Type: String
    NoEcho: 'true' # This hides the parameter value in console output and history
    Default: Z3TBUBW7GS7WSE2W

Resources:
  # S3 Bucket for storing data and scripts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub algotrading-demo-${AWS::AccountId}

  # ECR Repository for container images
  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}_ecr

  # SageMaker Notebook Instance for development and analysis
  AlgorithmicTradingInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: ml.t3.large
      DefaultCodeRepository: https://bitbucket.org/imalinovsky/algorithmic-trading
      RoleArn: !GetAtt SageMakerExecutionRole.Arn
      PlatformIdentifier: notebook-al2-v3

  # S3 Access Policy for the trading bucket
  S3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: S3 Permission
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::algotrading-demo-${AWS::AccountId}
              - !Sub arn:aws:s3:::algotrading-demo-${AWS::AccountId}/*

  # SageMaker Execution Role with necessary permissions
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess
        - !Ref S3Policy

  # ECS Task Execution Role for container tasks
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Algorithm Execution Role for trading algorithms
  AlgoExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS Cluster for running trading algorithms
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  # Glue Database for data catalog
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: algo_data

  # Athena Workgroup for querying data
  AthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: algo_data
      Description: AlgoWorkgroup
      RecursiveDeleteOption: true
      State: ENABLED
      WorkGroupConfiguration:
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation: !Sub s3://algotrading-demo-${AWS::AccountId}/results/

  # CloudWatch Log Group for application logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: algo
      RetentionInDays: 7

  # Glue ETL Job Role with Lake Formation permissions
  GlueETLJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AlgoTradingDataAdminRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin
      Policies:
        - PolicyName: LakeFormationRegisterResourcePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lakeformation:RegisterResource                 
                Resource: !Sub arn:aws:lakeformation:${AWS::Region}:${AWS::AccountId}:resource/algotrading-demo-${AWS::AccountId}

  # IAM Policy to allow Glue to pass its role
  GluePassRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowPassRoleForGlue
      Roles:
        - !Ref GlueETLJobRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt GlueETLJobRole.Arn

  # Glue ETL Job for loading Alpha Vantage news data
  GlueETLJobNews:
    Type: AWS::Glue::Job
    Properties:
      Name: load-alphavantage-news
      Role: !GetAtt GlueETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub s3://algotrading-demo-${AWS::AccountId}/scripts/dataloaders/load_alphavantage-news.py
        PythonVersion: "3"
      GlueVersion: "5.0"
      MaxRetries: 0
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Timeout: 10
      MaxCapacity: 2.0
      DefaultArguments:
        "--job-language": "python"
        "--BUCKET": !Sub algotrading-demo-${AWS::AccountId}
        "--enable-glue-datacatalog": "true"      
        "--ALPHAVANTAGE_API_KEY": !Ref AlphaVantageApiKey
        "--GLUE_DATABASE": !Ref GlueDatabase        
        "--EXECUTION_ROLE": !GetAtt SageMakerExecutionRole.Arn        

  # Glue ETL Job for loading Alpha Vantage OHLCV data
  GlueETLJobOHLCV:
    Type: AWS::Glue::Job
    Properties:
      Name: load-alphavantage-ohlcv
      Role: !GetAtt GlueETLJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub s3://algotrading-demo-${AWS::AccountId}/scripts/dataloaders/load_alphavantage-ohlcv.py
        PythonVersion: "3"
      GlueVersion: "5.0"
      MaxRetries: 0
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Timeout: 10
      MaxCapacity: 2.0
      DefaultArguments:
        "--job-language": "python"
        "--BUCKET": !Sub algotrading-demo-${AWS::AccountId}
        "--enable-glue-datacatalog": "true"      
        "--ALPHAVANTAGE_API_KEY": !Ref AlphaVantageApiKey
        "--GLUE_DATABASE": !Ref GlueDatabase
        "--EXECUTION_ROLE": !GetAtt SageMakerExecutionRole.Arn

  # Lake Formation permissions for the Glue ETL role on the database
  LakeFormationPermissionsOnDatabase:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt GlueETLJobRole.Arn
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL
      Resource:
        DatabaseResource:
          Name: algo_data

  # Lake Formation permissions for SageMaker to select from all tables
  DatabaseTableSelectPermissions: 
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt SageMakerExecutionRole.Arn
      Resource:
        TableResource:
          DatabaseName: !Ref GlueDatabase
          TableWildcard: {} # This grants permissions to all tables, current and future
      Permissions:
        - SELECT

  # Lake Formation Data Lake Settings with admin role
  DataLakeAdminSettings:
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !GetAtt GlueETLJobRole.Arn

  # Lake Formation S3 Resource registration
  LakeFormationS3Resource:
    Type: AWS::LakeFormation::Resource
    Properties:
      ResourceArn: !Sub arn:aws:s3:::algotrading-demo-${AWS::AccountId}
      RoleArn: !GetAtt GlueETLJobRole.Arn
      UseServiceLinkedRole: false

Outputs:
  # ECR Repository reference
  ECR:
    Description: A reference to ECR
    Value: !Ref ECR
    Export:
      Name: AlgorithmicTrading-ECR

  # S3 Bucket reference
  S3Bucket:
    Description: A reference to S3 Bucket
    Value: !Ref S3Bucket
    Export:
      Name: AlgorithmicTrading-S3Bucket

  # ECS Task Execution Role reference
  ECSTaskExecutionRole:
    Description: ECSTaskExecutionRole
    Value: !Ref ECSTaskExecutionRole
    Export:
      Name: AlgorithmicTrading-ECSTaskExecutionRole

  # Algorithm Execution Role ARN
  AlgoExecutionRole:
    Description: AlgoExecutionRole ARN
    Value: !GetAtt AlgoExecutionRole.Arn
    Export:
      Name: AlgorithmicTrading-AlgoExecutionRole-ARN

  # ECS Cluster reference
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: AlgorithmicTrading-ECSCluster
